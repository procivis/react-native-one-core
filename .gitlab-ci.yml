image: node:18.16.0-alpine

include:
  - project: "procivis/one/one-operations"
    file:
      - "gitlab/github.gitlab-ci.yml"

variables:
  NODE_OPTIONS: --max_old_space_size=1536
  DOCKER_DRIVER: overlay2
  YARN_CACHE_FOLDER: "./.yarn/cache"
  YARN_ENABLE_GLOBAL_CACHE: "false"
  GITHUB_PROJECT: "procivis/react-native-one-core"

stages:
  - prepare
  - build
  - publish
  - github
  - sdk


.only_tag:
  rules:
    - if: $CI_COMMIT_TAG

.only_manual_tag:
  rules:
    - if: $CI_COMMIT_TAG
      when: manual

.yarn-cache: &yarn-cache
    key:
      files:
        - yarn.lock
    paths:
      - node_modules/
      - ${YARN_CACHE_FOLDER}
    policy: pull

.modules_setup:
  cache:
    <<: *yarn-cache
  before_script:
    - apk add --update --no-cache --virtual .build-deps alpine-sdk libc6-compat gcompat
    - yarn global add node-gyp @mapbox/node-pre-gyp --network-concurrency 1
    - yarn install --frozen-lockfile --network-concurrency 1

.rule:only_mr_event:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: on_success

build_deps:
  stage: prepare
  extends:
    - .modules_setup
    - .rule:only_mr_event
  script:
    - ''
  cache:
    policy: pull-push

build:lib:
  stage: build
  extends:
    - .modules_setup
    - .rule:only_mr_event
  script:
    - yarn compile

build:kotlin:
  image: $CI_REGISTRY/procivis/one/one-operations/core-base:1.81.0-0.1
  stage: build
  variables:
    YARN_ENABLE_IMMUTABLE_INSTALLS: true
    NODE_ENV: development
  script:
    - cd example
    - yarn install
    - cd android
    - ./gradlew build
  cache:
    key: $CI_JOB_NAME_SLUG
    policy: pull-push
    when: on_success
    paths:
      - example/android/.gradle
  extends:
    - .rule:only_mr_event

build:swift:
  image: $CI_REGISTRY/procivis/one/one-operations/bitrise-builder:0.2.0
  stage: build
  variables:
    BITRISE_PROJECT_SLUG: 6ee8c26f-6d7b-4bcb-8ddc-be1ba3cd2687
    BITRISE_WORKFLOW: iOS_RN_Core_LIB
  script:
    - /etc/gitrise.sh
      --access-token $BITRISE_API_ACCESS_TOKEN
      --slug $BITRISE_PROJECT_SLUG
      --workflow $BITRISE_WORKFLOW
      --commit "$CI_COMMIT_SHA"
  extends:
    - .rule:only_mr_event

publish:npm:private:
  stage: publish
  needs: [build_deps]
  script:
    - npm config set @procivis:registry https://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/
    - npm config set //${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken ${CI_JOB_TOKEN}
    - npm publish --verbose --access restricted --tag stable
  extends:
    - .modules_setup
    - .only_tag

publish:npm:public:
  stage: publish
  needs: [build_deps]
  script:
    - npm config set //registry.npmjs.org/:_authToken ${NPMJS_TOKEN}
    - npm publish --verbose --access public
  extends:
    - .modules_setup
    - .only_manual_tag

github:push:
  needs: []
  extends:
    - .github:push

github:release:
  extends:
    - .github:release
  needs:
    - job: github:push

create_core_binding:
  stage: sdk
  image: $CI_REGISTRY/procivis/one/one-operations/bitrise-builder:0.2.0
  variables:
    # NEW_VERSION: required from upstream pipeline
    MR_ENDPOINT: ${CI_SERVER_URL}/api/v4/projects/${CI_PROJECT_ID}/merge_requests
    BRANCH_NAME: "auto_sdk-$CI_PIPELINE_ID"
  script:
    # Update package.json
    - jq --arg version "$NEW_VERSION" '.version = $version' package.json > package-updated.json
    - mv package-updated.json package.json
    # Update core-sdk.json
    - |
      jq --arg debugUrl "$ANDROID_DEBUG_LINK" \
         --arg debugSha1 "$ANDROID_DEBUG_SHA1" \
         --arg releaseUrl "$ANDROID_RELEASE_LINK" \
         --arg releaseSha1 "$ANDROID_RELEASE_SHA1" \
         --arg iosUrl "$IOS_LINK" \
         --arg iosSha1 "$IOS_SHA1" \
         '.android.debug.url = $debugUrl |
          .android.debug.sha1 = $debugSha1 |
          .android.release.url = $releaseUrl |
          .android.release.sha1 = $releaseSha1 |
          .ios.url = $iosUrl |
          .ios.sha1 = $iosSha1' core-sdk.json > core-sdk-updated.json
    - mv core-sdk-updated.json core-sdk.json
    # Push and Create MR request
    - git remote set-url origin "https://gitlab-ci-token:${GITLAB_PRIVATE_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
    - git add .
    - >
      git -c user.email="${GITLAB_USER_EMAIL}" -c user.name="${GITLAB_USER_NAME}"
      commit --no-verify -m "Update core bindings from pipeline ${NEW_VERSION}"
    - git push origin HEAD:refs/heads/${BRANCH_NAME}
    - |-
      PAYLOAD=$(cat << JSON
      {
        "source_branch": "$BRANCH_NAME",
        "target_branch": "$CI_DEFAULT_BRANCH",
        "title": "Auto SDK: Update Core bindings $CI_COMMIT_REF_NAME",
        "remove_source_branch": "true",
        "assignee_id": "$GITLAB_USER_ID"
      }
      JSON
      )
    - >
      curl --fail -X POST ${MR_ENDPOINT}
      -H "Content-Type: application/json"
      -H "PRIVATE-TOKEN: ${GITLAB_PRIVATE_TOKEN}"
      --data-binary "${PAYLOAD}"
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: always

sdk:project-update:
  stage: sdk
  needs:
    - job: publish:npm:private
  parallel:
    matrix:
      - SDK_PROJECT:
        - one/one-mobile-verifier
        - one/one-wallet
  variables:
    COMMIT_TITLE: "Update One Core bindings to $CI_COMMIT_TAG"
    BRANCH_NAME: "sdk-core-binding-$CI_PIPELINE_ID"
    MR_TITLE: "Update One Core bindings to $CI_COMMIT_TAG"
    NEW_VERSION: $CI_COMMIT_TAG
  trigger:
    project: procivis/$SDK_PROJECT
    branch: main
    strategy: depend
  extends:
    - .only_tag
